@model IEnumerable<TvShop.Models.Order>
@using System.Globalization
@using TvShop.Models

<div class="container my-4">
    <div class="row align-items-center mb-4">
        <div class="col-md-6">
            <h2><i class="fas fa-boxes me-2"></i>All Users Orders</h2>
            <p class="text-muted">Manage and monitor all customer orders</p>
        </div>
        <div class="col-md-6 text-md-end">
            <a asp-controller="Admin" asp-action="Index" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-1"></i> Back to Admin Panel
            </a>
        </div>
    </div>
    
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i> @ViewBag.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Order Filter and Search -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-white py-3">
            <h5 class="card-title mb-0"><i class="fas fa-filter me-2"></i>Filter Orders</h5>
        </div>
        <div class="card-body">
            <form method="get" asp-action="UsersOrders" asp-controller="Order" id="orderFilterForm">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Order Status</label>
                        <select id="statusFilter" name="statusFilter" class="form-select">
                            <option value="">All Statuses</option>
                            <option value="Pending" selected=@(ViewBag.StatusFilter == "Pending")>Pending</option>
                            <option value="Processing" selected=@(ViewBag.StatusFilter == "Processing")>Processing</option>
                            <option value="Shipped" selected=@(ViewBag.StatusFilter == "Shipped")>Shipped</option>
                            <option value="Delivered" selected=@(ViewBag.StatusFilter == "Delivered")>Delivered</option>
                            <option value="Cancelled" selected=@(ViewBag.StatusFilter == "Cancelled")>Cancelled</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="dateFilter" class="form-label">Date Range</label>
                        <select id="dateFilter" name="days" class="form-select">
                            <option value="">All Time</option>
                            <option value="7" selected=@(ViewBag.DaysFilter == 7)>Last 7 Days</option>
                            <option value="30" selected=@(ViewBag.DaysFilter == 30)>Last 30 Days</option>
                            <option value="90" selected=@(ViewBag.DaysFilter == 90)>Last 3 Months</option>
                            <option value="365" selected=@(ViewBag.DaysFilter == 365)>Last Year</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="userFilter" class="form-label">Customer</label>
                        <select id="userFilter" name="userId" class="form-select">
                            <option value="">All Customers</option>
                            @if (ViewBag.Users != null)
                            {
                                @foreach (var user in ViewBag.Users)
                                {
                                    <option value="@user.Id" selected=@(ViewBag.UserIdFilter == user.Id)>@user.Email</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="searchOrder" class="form-label">Search</label>
                        <div class="input-group">
                            <input type="text" id="searchOrder" name="search" class="form-control" placeholder="Order #, product, customer..." value="@ViewBag.SearchTerm">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-between mt-3">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="clearFilters">
                        <i class="fas fa-eraser me-1"></i> Clear Filters
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-filter me-1"></i> Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Orders Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-primary mb-3 shadow stat-card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Total Orders</h6>
                            <h2 class="mb-1 counter-value">@Model.Count()</h2>
                            <p class="text-white-50 mb-0 small">All time</p>
                        </div>
                        <div class="icon-box">
                            <i class="fas fa-shopping-cart fa-2x"></i>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-primary-dark py-2 px-3 border-0">
                    <span class="small text-white d-flex align-items-center">
                        <i class="fas fa-chart-line me-1"></i> Updated in real-time
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success mb-3 shadow stat-card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Total Revenue</h6>
                            <h2 class="mb-1 counter-value">â‚¹@Model.Sum(o => o.TotalAmount).ToString("N0")</h2>
                            <p class="text-white-50 mb-0 small">All time</p>
                        </div>
                        <div class="icon-box">
                            <i class="fas fa-rupee-sign fa-2x"></i>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-success-dark py-2 px-3 border-0">
                    <span class="small text-white d-flex align-items-center">
                        <i class="fas fa-arrow-up me-1"></i> @(Model.Any() ? Math.Round(Convert.ToDouble(Model.Where(o => o.Status != OrderStatus.Cancelled).Sum(o => o.TotalAmount)) / (Model.Count() * 1.0) * 100) : 0)% order completion
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-info mb-3 shadow stat-card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Pending Orders</h6>
                            <h2 class="mb-1 counter-value">@Model.Count(o => o.Status == OrderStatus.Pending)</h2>
                            <p class="text-white-50 mb-0 small">Need attention</p>
                        </div>
                        <div class="icon-box">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-info-dark py-2 px-3 border-0">
                    <span class="small text-white d-flex align-items-center">
                        <i class="fas fa-tasks me-1"></i> @(Model.Any() ? Math.Round((double)Model.Count(o => o.Status == OrderStatus.Pending) / Model.Count() * 100) : 0)% of all orders
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning mb-3 shadow stat-card">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Unique Customers</h6>
                            <h2 class="mb-1 counter-value">@Model.Select(o => o.UserId).Distinct().Count()</h2>
                            <p class="text-white-50 mb-0 small">With orders</p>
                        </div>
                        <div class="icon-box">
                            <i class="fas fa-users fa-2x"></i>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-warning-dark py-2 px-3 border-0">
                    <span class="small text-white d-flex align-items-center">
                        <i class="fas fa-user-check me-1"></i> Active customer base
                    </span>
                </div>
            </div>
        </div>
    </div>
    
    <style>
        /* Custom styles for statistics cards */
        .stat-card {
            transition: all 0.3s ease;
            border: none;
            overflow: hidden;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
        }
        
        .icon-box {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bg-primary-dark {
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .bg-success-dark {
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .bg-info-dark {
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .bg-warning-dark {
            background-color: rgba(0, 0, 0, 0.1);
        }
    </style>

@if (Model != null && Model.Any())
{
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0"><i class="fas fa-list me-2"></i>Order List</h5>
            <div>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-file-export me-1"></i> Export
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#"><i class="fas fa-file-csv me-2"></i>CSV</a></li>
                        <li><a class="dropdown-item" href="#"><i class="fas fa-file-excel me-2"></i>Excel</a></li>
                        <li><a class="dropdown-item" href="#"><i class="fas fa-file-pdf me-2"></i>PDF</a></li>
                    </ul>
                </div>
                <button class="btn btn-sm btn-outline-secondary ms-1">
                    <i class="fas fa-print me-1"></i> Print
                </button>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle" id="ordersTable">
                <thead class="table-light">
                    <tr>
                        <th scope="col"><input type="checkbox" class="form-check-input" id="selectAll"></th>
                        <th scope="col">Order #</th>
                        <th scope="col">Customer</th>
                        <th scope="col">Date</th>
                        <th scope="col">Items</th>
                        <th scope="col">Total</th>
                        <th scope="col">Status</th>
                        <th scope="col" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                            <tr>
                                <td><strong>#@order.Id</strong></td>
                                <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <div>@order.CustomerName</div>
                                    <small class="text-muted">@order.Email</small>
                                </td>
                                <td>@(order.OrderItems?.Count ?? 0) items</td>
                                <td class="text-success fw-bold">â‚¹@order.TotalAmount.ToString("N2")</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(order.Status)">
                                        @order.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                            Actions
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#orderModal-@order.Id">
                                                    <i class="fas fa-eye me-1"></i> View Details
                                                </a>
                                            </li>
                                            @if (order.Status == OrderStatus.Pending)
                                            {
                                                <li>
                                                    <a class="dropdown-item" asp-controller="Order" asp-action="UpdateStatus" asp-route-id="@order.Id">
                                                        <i class="fas fa-truck me-1"></i> Mark as Shipped
                                                    </a>
                                                </li>
                                            }
                                            <li>
                                                <a class="dropdown-item" href="#">
                                                    <i class="fas fa-print me-1"></i> Print Invoice
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                            
                            <!-- Order Details Modal -->
                            <div class="modal fade" id="orderModal-@order.Id" tabindex="-1" aria-labelledby="orderModalLabel-@order.Id" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="orderModalLabel-@order.Id">Order #@order.Id Details</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row mb-4">
                                                <div class="col-md-6">
                                                    <h6><i class="fas fa-info-circle me-2"></i>Order Information</h6>
                                                    <table class="table table-sm table-borderless">
                                                        <tr>
                                                            <td width="40%">Order ID:</td>
                                                            <td><strong>#@order.Id</strong></td>
                                                        </tr>
                                                        <tr>
                                                            <td>Date:</td>
                                                            <td>@order.OrderDate.ToString("MMM dd, yyyy hh:mm tt")</td>
                                                        </tr>
                                                        <tr>
                                                            <td>Status:</td>
                                                            <td>
                                                                <span class="badge @GetStatusBadgeClass(order.Status)">
                                                                    @order.Status
                                                                </span>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>Payment ID:</td>
                                                            <td>@(string.IsNullOrEmpty(order.PaymentId) ? "Not paid" : order.PaymentId)</td>
                                                        </tr>
                                                    </table>
                                                </div>
                                                <div class="col-md-6">
                                                    <h6><i class="fas fa-user me-2"></i>Customer Information</h6>
                                                    <table class="table table-sm table-borderless">
                                                        <tr>
                                                            <td width="40%">Name:</td>
                                                            <td><strong>@order.CustomerName</strong></td>
                                                        </tr>
                                                        <tr>
                                                            <td>Email:</td>
                                                            <td>@order.Email</td>
                                                        </tr>
                                                        <tr>
                                                            <td>Phone:</td>
                                                            <td>@(order.PhoneNumber ?? "Not provided")</td>
                                                        </tr>
                                                        <tr>
                                                            <td>Address:</td>
                                                            <td>@order.Address</td>
                                                        </tr>
                                                    </table>
                                                </div>
                                            </div>
                                            
                                            <h6><i class="fas fa-shopping-cart me-2"></i>Order Items</h6>
                                            <div class="table-responsive">
                                                <table class="table table-sm">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Product</th>
                                                            <th>Unit Price</th>
                                                            <th>Quantity</th>
                                                            <th class="text-end">Total</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @if (order.OrderItems != null && order.OrderItems.Any())
                                                        {
                                                            @foreach (var item in order.OrderItems)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        <div class="d-flex align-items-center">
                                                                            <img src="@item.MainImageUrl" alt="@item.ProductName" class="img-thumbnail me-2" style="width: 40px; height: 40px; object-fit: cover;">
                                                                            <div>
                                                                                <p class="mb-0 fw-semibold">@item.ProductName</p>
                                                                            </div>
                                                                        </div>
                                                                    </td>
                                                                    <td>â‚¹@item.Price.ToString("N2")</td>
                                                                    <td>@item.Quantity</td>
                                                                    <td class="text-end">â‚¹@((item.Price * item.Quantity).ToString("N2"))</td>
                                                                </tr>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <tr>
                                                                <td colspan="4" class="text-center">No items found for this order.</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                    <tfoot class="table-light fw-bold">
                                                        <tr>
                                                            <td colspan="3" class="text-end">Order Total:</td>
                                                            <td class="text-end">â‚¹@order.TotalAmount.ToString("N2")</td>
                                                         </tr>
                                                    </tfoot>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            @if (order.Status == OrderStatus.Pending)
                                            {
                                                <a asp-controller="Order" asp-action="UpdateStatus" asp-route-id="@order.Id" class="btn btn-primary">
                                                    <i class="fas fa-truck me-1"></i> Mark as Shipped
                                                </a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer bg-white py-3 d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <span class="me-2">Showing @Model.Count() orders</span>
                    <select class="form-select form-select-sm" style="width: auto;">
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                        <option value="50">50 per page</option>
                        <option value="100">100 per page</option>
                    </select>
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
        
        <style>
            /* Custom styles for the avatar */
            .avatar {
                width: 32px;
                height: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .avatar-circle {
                border-radius: 50%;
                overflow: hidden;
            }
            
            .avatar-initials {
                width: 100%;
                height: 100%;
                font-size: 14px;
                font-weight: 600;
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            /* Order row hover effect */
            .order-row {
                transition: background-color 0.2s;
            }
            
            .order-row:hover {
                background-color: rgba(0, 123, 255, 0.05);
            }
        </style>
    
}
else
{
    <div class="alert alert-info shadow-sm">
        <div class="d-flex align-items-center">
            <div class="me-3">
                <i class="fas fa-info-circle fa-3x text-primary"></i>
            </div>
            <div>
                <h4 class="alert-heading mb-2">No Orders Found</h4>
                <p class="mb-0">There are no orders matching your filter criteria. Try adjusting your filters or search terms.</p>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        })
        
        // Handle select all checkboxes
        const selectAllCheckbox = document.getElementById('selectAll');
        const orderCheckboxes = document.querySelectorAll('.order-select');
        
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const isChecked = this.checked;
                orderCheckboxes.forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
            });
        }
        
        // Update individual checkbox state
        orderCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const allChecked = [...orderCheckboxes].every(c => c.checked);
                const anyChecked = [...orderCheckboxes].some(c => c.checked);
                
                if (selectAllCheckbox) {
                    selectAllCheckbox.checked = allChecked;
                    selectAllCheckbox.indeterminate = anyChecked && !allChecked;
                }
            });
        });
        
        // Clear filters button functionality
        document.getElementById('clearFilters')?.addEventListener('click', function() {
            const form = document.getElementById('orderFilterForm');
            const selects = form.querySelectorAll('select');
            const inputs = form.querySelectorAll('input[type="text"]');
            
            selects.forEach(select => {
                select.selectedIndex = 0;
            });
            
            inputs.forEach(input => {
                input.value = '';
            });
            
            form.submit();
        });
        
        // Add animation to counter values
        document.addEventListener('DOMContentLoaded', function() {
            const counters = document.querySelectorAll('.counter-value');
            counters.forEach(counter => {
                const text = counter.innerText;
                const numericValue = parseInt(text.replace(/[^0-9]/g, '')) || 0;
                const currencySymbol = text.match(/[^0-9.,\s]/g)?.join('') || '';
                
                const animate = () => {
                    const duration = 1500;
                    const frameDuration = 1000/60;
                    const totalFrames = Math.round(duration/frameDuration);
                    let frame = 0;
                    
                    const counterInterval = setInterval(() => {
                        frame++;
                        const progress = frame / totalFrames;
                        const currentCount = Math.round(numericValue * progress);
                        
                        counter.innerText = currencySymbol + currentCount.toLocaleString();
                        
                        if (frame === totalFrames) {
                            clearInterval(counterInterval);
                            counter.innerText = text; // Reset to original format
                        }
                    }, frameDuration);
                };
                
                // Use Intersection Observer to trigger animation when element is visible
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            animate();
                            observer.unobserve(entry.target);
                        }
                    });
                }, { threshold: 0.5 });
                
                observer.observe(counter);
            });
            
            // Initialize filter selections from URL parameters
            var urlParams = new URLSearchParams(window.location.search);
            
            if (urlParams.has('statusFilter')) {
                $('#statusFilter').val(urlParams.get('statusFilter'));
            }
            
            if (urlParams.has('days')) {
                $('#dateFilter').val(urlParams.get('days'));
            }
            
            if (urlParams.has('userId')) {
                $('#userFilter').val(urlParams.get('userId'));
            }
            
            if (urlParams.has('search')) {
                $('#searchOrder').val(urlParams.get('search'));
            }
        });
    </script>
}

@section Styles {
    <style>
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid rgba(0,0,0,.125);
        }
        
        .badge {
            padding: 0.5rem 0.65rem;
        }
        
        .order-card {
            transition: transform 0.2s;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1)!important;
        }
    </style>
}

@functions {
    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-secondary",
            OrderStatus.Processing => "bg-primary",
            OrderStatus.Shipped => "bg-info",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
